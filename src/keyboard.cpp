/*
  Copyright Frank Bösing, 2017

  This file is part of Teensy64.

    Teensy64 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Teensy64 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Teensy64.  If not, see <http://www.gnu.org/licenses/>.

    Diese Datei ist Teil von Teensy64.

    Teensy64 ist Freie Software: Sie können es unter den Bedingungen
    der GNU General Public License, wie von der Free Software Foundation,
    Version 3 der Lizenz oder (nach Ihrer Wahl) jeder späteren
    veröffentlichten Version, weiterverbreiten und/oder modifizieren.

    Teensy64 wird in der Hoffnung, dass es nützlich sein wird, aber
    OHNE JEDE GEWÄHRLEISTUNG, bereitgestellt; sogar ohne die implizite
    Gewährleistung der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK.
    Siehe die GNU General Public License für weitere Details.

    Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
    Programm erhalten haben. Wenn nicht, siehe <http://www.gnu.org/licenses/>.

*/

#include "Teensy64.h"
#include "keyboard.h"

#include "keyboard_usb.h"
#include "cia.h"

USBHost myusb;

c64USBKeyboard keyboard(myusb);

USBHub hub1(myusb);
USBHub hub2(myusb);
USBHub hub3(myusb);

const char *hotkeys[] = {"\x45RUN", //F12
                         "\x44LOAD\"$\"\rLIST\r",  //F11
                         "\x43LOAD\"$\",8", //F10
                         "\x42LOAD\"*\",8", //F9
                         nullptr
};

char *_sendString = nullptr;

void sendKey(char key) {
    while(true) {
        noInterrupts();
        if(cpu.RAM[198] == 0) { break; }
        interrupts();
        delay(1);
        //asm volatile("wfi");
    }

    cpu.RAM[631] = key;
    cpu.RAM[198] = 1;

    interrupts();
}

void do_sendString() {
    if(_sendString == nullptr) {
        return;
    }

    char ch = *_sendString++;

    if(ch != 0) {
        sendKey(ch);
    } else {
        _sendString = nullptr;
    }
}

void sendString(const char *p) {
    _sendString = (char *) p;

    Serial.print("Send String:");
    Serial.println(p);
}

static bool hotkey(char ch) {
    if(_sendString != nullptr) {
        return true;
    }

    unsigned i = 0;

    while(hotkeys[i] != nullptr) {
        if(*hotkeys[i] == ch) {
            sendString(hotkeys[i] + 1);
            return true;
        }

        i++;
    }

    return false;
}

/*******************************************************************************************************************/
/*******************************************************************************************************************/
/*******************************************************************************************************************/

//Array values are keyboard-values returned from USB
//LeftShift, RightShift, Control, and Commodore are special codes, represented here with 0xfc..0xff
static const uint8_t ktab[8][8] = {
    { 0x2a, 0x28, 0x4f, 0x40, 0x3a, 0x3c, 0x3e, 0x51 }, //DEL, Return, Cursor Right, F7, F1, F3, F5, Cursor Down
    { 0x20, 0x1a, 0x04, 0x21, 0x1d, 0x16, 0x08, 0xff }, //3, W, A, 4, Z, S, E, LeftShift
    { 0x22, 0x15, 0x07, 0x23, 0x06, 0x09, 0x17, 0x1b }, //5, R, D, 6, C, F, T, X
    { 0x24, 0x1c, 0x0a, 0x25, 0x05, 0x0B, 0x18, 0x19 }, //7, Y, G, 8, B, H, U, V
    { 0x26, 0x0c, 0x0D, 0x27, 0x10, 0x0E, 0x12, 0x11 }, //9, I, J, 0, M, K, O, N
    { 0x57, 0x13, 0x0F, 0x56, 0x37, 0x33, 0x2f, 0x36 }, //+(Keypad), P, L, -(Keypad), ",", ":", "@", ","
    { 0x49, 0x55, 0x34, 0x4A, 0xfe, 0x32, 0x4b, 0x54 }, //Pound(ins), *(Keypad), ";", HOME (Pos1), RightShift, =, UP Arrow (Bild hoch), /(Keypad)
    { 0x1e, 0x4e, 0xfd, 0x1f, 0x2c, 0xfc, 0x14, 0x29 } //1,LEFT ARROW(Bild runter) , CTRL, 2, Space, Commodore, Q, RUN/STOP(ESC)
};


//Autogenerated with C64_keyboardtool.ino :
static const uint8_t keymatrixmap[2][256] = {
    //Rows:
    // 0    1     2     3    4     5     6      7     8      9     A     B     C     D     E     F
    {   0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x04, 0x04, 0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x20, //0x00
        0x10, 0x10, 0x10, 0x20, 0x80, 0x04, 0x02, 0x04, 0x08, 0x08, 0x02, 0x04, 0x08, 0x02, 0x80, 0x80, //0x10
        0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x01, 0x80, 0x01, 0x00, 0x80, 0x00, 0x00, 0x20, //0x20
        0x00, 0x00, 0x40, 0x20, 0x40, 0x00, 0x20, 0x20, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, //0x30
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x80, 0x01, //0x40
        0x00, 0x01, 0x00, 0x00, 0x40, 0x40, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x50
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x60
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x70
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x80
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x90
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xA0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xB0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xC0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xD0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xE0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x02
    }, //0xF0
    //Columns:
    // 0    1     2     3    4     5     6      7     8      9     A     B     C     D     E     F
    {   0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10, 0x04, 0x40, 0x20, 0x04, 0x20, 0x02, 0x04, 0x20, 0x04, //0x00
        0x10, 0x80, 0x40, 0x02, 0x40, 0x02, 0x20, 0x40, 0x40, 0x80, 0x02, 0x80, 0x02, 0x10, 0x01, 0x08, //0x10
        0x01, 0x08, 0x01, 0x08, 0x01, 0x08, 0x01, 0x08, 0x02, 0x80, 0x01, 0x00, 0x10, 0x00, 0x00, 0x40, //0x20
        0x00, 0x00, 0x20, 0x20, 0x04, 0x00, 0x80, 0x10, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, //0x30
        0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x02, 0x04, //0x40
        0x00, 0x80, 0x00, 0x00, 0x80, 0x02, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x50
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x60
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x70
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x80
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x90
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xA0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xB0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xC0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xD0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xE0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x10, 0x80
    }
}; //0xF0

struct {
    union {
        uint32_t kv;
        struct {
            uint8_t ke,   //Extratasten SHIFT, STRG, ALT...
            kdummy,
            k,    //Erste gedrückte Taste
            k2;   //Zweite gedrückte Taste
        };
    };
    uint32_t lastkv;
    uint8_t shiftLock;
} kbdData = { {0}, 0, 0 };


/*
  Die Initialisierung der I/O-Ports erfolgt bei $FDA3:
        Die Portbits PB0-PB7 des CIA 1 werden als Eingänge programmiert ($DC03=0).
        Ohne Tastendruck liegt auf den Eingängen wegen der im Portbaustein integrierten Pull-Up-Widerstände ein High-Pegel.
        Die Portbits PA0-PA7 des CIA 1 werden als Ausgänge programmiert ($DC02=255).
  Die eigentliche Keyscan-Routine bei $EA87 macht folgendes:
        Es wird eine 0 (Low-Pegel) durch die Portbits PA0-PA7 geschoben ($DC00=254,253,251,247,239..., siehe KERNAL $EAA3 und $EAD6).
        Werden Nullen bei den Eingangs-Portbits PB0-PB7/$DC01 festgestellt (KERNAL $EAAB), so sind die entsprechende(n) Taste(n) gedrückt.
*/

uint8_t cia1PORTA() {
    uint8_t v;

    v = ~cpu.cia1.R[CIA_DDRA] | (cpu.cia1.R[CIA_PRA] & cpu.cia1.R[CIA_DDRA]);

    if(!cpu.swapJoysticks) {
        if(gpioRead(PIN_JOY2_1) == 0) { v &= ~CIA1_PR_JOY_UP; }
        if(gpioRead(PIN_JOY2_2) == 0) { v &= ~CIA1_PR_JOY_DOWN; }
        if(gpioRead(PIN_JOY2_3) == 0) { v &= ~CIA1_PR_JOY_LEFT; }
        if(gpioRead(PIN_JOY2_4) == 0) { v &= ~CIA1_PR_JOY_RIGHT; }
        if(gpioRead(PIN_JOY2_BTN) == 0) { v &= ~CIA1_PR_JOY_BTN; }
    } else {
        if(gpioRead(PIN_JOY1_1) == 0) { v &= ~CIA1_PR_JOY_UP; }
        if(gpioRead(PIN_JOY1_2) == 0) { v &= ~CIA1_PR_JOY_DOWN; }
        if(gpioRead(PIN_JOY1_3) == 0) { v &= ~CIA1_PR_JOY_LEFT; }
        if(gpioRead(PIN_JOY1_4) == 0) { v &= ~CIA1_PR_JOY_RIGHT; }
        if(gpioRead(PIN_JOY1_BTN) == 0) { v &= ~CIA1_PR_JOY_BTN; }
    }

    if(!kbdData.kv) { return v; } //Keine Taste gedrückt

    uint8_t filter = ~cpu.cia1.R[CIA_PRB] & cpu.cia1.R[CIA_DDRB];

    if(kbdData.k) {
        if(keymatrixmap[1][kbdData.k] & filter) { v &= ~keymatrixmap[0][kbdData.k]; }
    }

    if(kbdData.ke) {
        if(kbdData.ke & 0x02) { //Shift-links
            if(keymatrixmap[1][0xff] & filter) { v &= ~keymatrixmap[0][0xff]; }
        }
        if(kbdData.ke & 0x20) { //Shift-rechts
            if(keymatrixmap[1][0xfe] & filter) { v &= ~keymatrixmap[0][0xfe]; }
        }
        if(kbdData.ke & 0x11) { //Control
            if(keymatrixmap[1][0xfd] & filter) { v &= ~keymatrixmap[0][0xfd]; }
        }
        if(kbdData.ke & 0x88) { //Windows (=> Commodore)
            if(keymatrixmap[1][0xfc] & filter) { v &= ~keymatrixmap[0][0xfc]; }
        }
    }

    return v;
}


uint8_t cia1PORTB() {
    uint8_t v;

    v = ~cpu.cia1.R[0x03] | (cpu.cia1.R[0x00] & cpu.cia1.R[0x02]);

    if(!cpu.swapJoysticks) {
        if(gpioRead(PIN_JOY1_1) == 0) { v &= ~CIA1_PR_JOY_UP; }
        if(gpioRead(PIN_JOY1_2) == 0) { v &= ~CIA1_PR_JOY_DOWN; }
        if(gpioRead(PIN_JOY1_3) == 0) { v &= ~CIA1_PR_JOY_LEFT; }
        if(gpioRead(PIN_JOY1_4) == 0) { v &= ~CIA1_PR_JOY_RIGHT; }
        if(gpioRead(PIN_JOY1_BTN) == 0) { v &= ~CIA1_PR_JOY_BTN; }
    } else {
        if(gpioRead(PIN_JOY2_1) == 0) { v &= ~CIA1_PR_JOY_UP; }
        if(gpioRead(PIN_JOY2_2) == 0) { v &= ~CIA1_PR_JOY_DOWN; }
        if(gpioRead(PIN_JOY2_3) == 0) { v &= ~CIA1_PR_JOY_LEFT; }
        if(gpioRead(PIN_JOY2_4) == 0) { v &= ~CIA1_PR_JOY_RIGHT; }
        if(gpioRead(PIN_JOY2_BTN) == 0) { v &= ~CIA1_PR_JOY_BTN; }
    }

    if(!kbdData.kv) { return v; } //Keine Taste gedrückt

    uint8_t filter = ~cpu.cia1.R[0x00] & cpu.cia1.R[0x02];
    if(kbdData.k) {
        if(keymatrixmap[0][kbdData.k] & filter) v &= ~keymatrixmap[1][kbdData.k];
    }

    if(kbdData.ke) {
        if(kbdData.ke & 0x02) { //Shift-links
            if(keymatrixmap[0][0xff] & filter) { v &= ~keymatrixmap[1][0xff]; }
        }
        if(kbdData.ke & 0x20) { //Shift-rechts
            if(keymatrixmap[0][0xfe] & filter) { v &= ~keymatrixmap[1][0xfe]; }
        }
        if(kbdData.ke & 0x11) { //Control
            if(keymatrixmap[0][0xfd] & filter) { v &= ~keymatrixmap[1][0xfd]; }
        }
        if(kbdData.ke & 0x88) { //Windows (=> Commodore)
            if(keymatrixmap[0][0xfc] & filter) { v &= ~keymatrixmap[1][0xfc]; }
        }
    }

    return v;
}

void usbKeyboardmatrix(void *keys) { //Interrupt
    kbdData.kv = *(uint32_t *) keys;//Use only the first 4 bytes


    if(kbdData.kv != kbdData.lastkv) {

        kbdData.lastkv = kbdData.kv;
        if(!kbdData.kv) { return; }
        if(hotkey(kbdData.k)) { return; }

        Serial.printf("0x%x 0x%x\n", kbdData.ke, kbdData.k);

        //Special Keys
        //RESET
        if(kbdData.ke == 0x05 && kbdData.k == 0x4c) {
            //resetExternal();
            resetMachine();
        } else if(kbdData.k == 0x46) { //RESTORE - "Druck"
            kbdData.k = kbdData.k2;
            kbdData.k2 = 0;

            cpu_nmi();

            return;
        } else if(kbdData.k2 == 0x46) { //RESTORE - "Druck"
            kbdData.k2 = 0;

            cpu_nmi();

            return;
        } else if(kbdData.k == 72) {
            cpu.vic.nextPalette();

            return;
        } else if(kbdData.k == 0x53) {// Joystick - Swap " Numlock"
            cpu.swapJoysticks = (cpu.swapJoysticks + 1) & 0x01;

            //Todo: Add some indication here
            Serial.print("Joysticks ");
            Serial.println((cpu.swapJoysticks) ? "swapped" : "default");

            //TODO: Does not work: Bug in USB Code ?
            keyboard.numLock(cpu.swapJoysticks);

            return;
        } else if(kbdData.ke == 0x10) {
            if(kbdData.k == 0x52) { //volume up
                if(AudioOutputAnalog::volume > 4) { AudioOutputAnalog::volume--; } //volume is a bit-shift right
            } else if(kbdData.k == 0x51) { //volume down
                if(AudioOutputAnalog::volume < 16) { AudioOutputAnalog::volume++; } //volume is a bit-shift right
            }
        }

        //Shift Lock
        if(kbdData.k == 0x39) {
            kbdData.kv = 0;
            kbdData.shiftLock = ~kbdData.shiftLock;

            if(kbdData.shiftLock) {
                //Serial.println("ShiftLock: ON");
                //  keyboard.LEDS(0x02);
            } else {
                //Serial.println("ShiftLock: OFF");
                //  keyboard.LEDS(0x00);
            }

            return;
        }
        if(kbdData.shiftLock) { kbdData.ke |= 0x20; } //Apply shift-lock by pressing right shift

        //Sondertasten
        //Cursor -> kein Shift
        if((kbdData.k == 0x4f) || (kbdData.k == 0x51)) {
            kbdData.ke &= ~0x22;  //Shift entfernen

            return;
        }
            //Cursor Links => Shift und Cursor Rechts
        else if(kbdData.k == 0x50) {
            kbdData.ke |= 0x20;   //Shift Rechts
            kbdData.k = 0x4f;   //Cursor Rechts

            return;
        }
            //Cursor Hoch => Shift und Cursor Runter
        else if(kbdData.k == 0x52) {
            kbdData.ke |= 0x20;
            kbdData.k = 0x51;   //Cursor runter

            return;
        }
            //F2 => SHIFT + F1, F4 => SHIFT + F3, F6 => SHIFT + F5, F8 => SHIFT + F7
        else if(kbdData.k == 0x3b || kbdData.k == 0x3d || kbdData.k == 0x3f || kbdData.k == 0x41) {
            kbdData.ke |= 0x20;
            kbdData.k -= 1;

            return;
        }
    }
}

void initJoysticks() {
    pinMode(PIN_JOY1_1, INPUT_PULLUP);
    pinMode(PIN_JOY1_2, INPUT_PULLUP);
    pinMode(PIN_JOY1_3, INPUT_PULLUP);
    pinMode(PIN_JOY1_4, INPUT_PULLUP);
    pinMode(PIN_JOY1_BTN, INPUT_PULLUP);

    pinMode(PIN_JOY2_1, INPUT_PULLUP);
    pinMode(PIN_JOY2_2, INPUT_PULLUP);
    pinMode(PIN_JOY2_3, INPUT_PULLUP);
    pinMode(PIN_JOY2_4, INPUT_PULLUP);
    pinMode(PIN_JOY2_BTN, INPUT_PULLUP);
}

void initKeyboard() {
    keyboard.attachC64(usbKeyboardmatrix);
}
